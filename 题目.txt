import java.util.*;

/**
 * Demo class
 *
 * @author keriezhang
 * @date 2016/10/31
 */



public class demo {
    static int[][] migong;
    //矩阵大小
    static int n;
    //最短步长
    static int min;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入迷宫的大小");
        n = sc.nextInt();
        min = n*n;
        migong = new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                migong[i][j] = sc.nextInt();
            }
            System.out.println("第"+(i+1)+"行输入完毕");
        }
        //起始点为（1，1），初始步长为0
        recursion(1, 1, 0);
        if(min==n*n) {
            System.out.println("No solution");
        }else{
            System.out.println(min);
        }

    }
    public static void recursion(int x, int y, int count) {
        //跳出条件，走到[n-2][n-2]位置即为终点
        if(x==n-2 && y==n-2) {
            min = Math.min(count, min);
        }else {
            //走过的位置不能重复走，故而走过就设为1（障碍物）
            migong[x][y]=1;
            if(y<n-1 && migong[x][y+1]==0) {
                recursion(x, y+1, count+1);
            }
            if(x<n-1 && migong[x+1][y]==0) {
                recursion(x+1, y, count+1);
            }
            if(x>1 && migong[x-1][y]==0) {
                recursion(x-1, y, count+1);
            }
            if(y>1 && migong[x][y-1]==0) {
                recursion(x, y-1, count+1);
            }

            migong[x][y]=0;
        }
    }
}